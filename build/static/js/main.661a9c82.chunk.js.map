{"version":3,"sources":["common/data/dropdown.js","components/dropdown/index.js","App.js","reportWebVitals.js","index.js"],"names":["DROPDOWN_OPTIONS","Dropdown","props","label","selectedOption","setSelectedOption","options","_useState","useState","_useState2","Object","slicedToArray","isOptionsVisible","setIsOptionsVisible","react_default","a","createElement","className","onClick","xmlns","class","width","height","viewBox","stroke-width","stroke","fill","stroke-linecap","stroke-linejoin","d","transform","length","map","option","handleSelected","App","components_dropdown","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App_0"],"mappings":"kNACaA,SAAiB,CAC3B,oBACA,wBACA,2BACA,mBACA,iBCqEYC,SAvEE,SAACC,GAAU,IAElBC,EAAqDD,EAArDC,MAAOC,EAA8CF,EAA9CE,eAAgBC,EAA8BH,EAA9BG,kBAAmBC,EAAWJ,EAAXI,QAFxBC,EAIuBC,oBAAS,GAJhCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAIlBK,EAJkBH,EAAA,GAIAI,EAJAJ,EAAA,GAY1B,OACEK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,oBACCd,GAASW,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAkBd,GAE1CW,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACZH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAEVC,QAAS,kBAAML,GAAqBD,KACrCE,EAAAC,EAAAC,cAAA,WAAMZ,GAELQ,EAECE,EAAAC,EAAAC,cAAA,OACCG,MAAM,6BACNC,MAAM,wCACNC,MAAM,KACNC,OAAO,KACPC,QAAQ,YACRC,eAAa,MACbC,OAAO,UACPC,KAAK,OACLC,iBAAe,QACfC,kBAAgB,SACjBd,EAAAC,EAAAC,cAAA,QACCS,OAAO,OACPI,EAAE,gBACFH,KAAK,SACNZ,EAAAC,EAAAC,cAAA,QACCa,EAAE,0BAEFf,EAAAC,EAAAC,cAAA,OACCG,MAAM,6BACNC,MAAM,0CACNC,MAAM,KACNC,OAAO,KACPC,QAAQ,YACRC,eAAa,MACbC,OAAO,UACPC,KAAK,OACLC,iBAAe,QACfC,kBAAgB,SACjBd,EAAAC,EAAAC,cAAA,QACES,OAAO,OACPI,EAAE,gBACFH,KAAK,SACPZ,EAAAC,EAAAC,cAAA,QAAMa,EAAE,uBAAuBC,UAAU,wBAG/ClB,GAEME,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACjBX,EAAQyB,OAAQ,GAAKzB,EAAQ0B,IAAI,SAACC,GAAD,OAAYnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAkBC,QAAS,kBAzDhF,SAACe,GACrB5B,EAAkB4B,GAClBpB,GAAoB,GAuDoFqB,CAAeD,KAAUA,UC7CtHE,EAlBH,WAAM,IAAA5B,EAG4BC,mBAASR,EAAiB,IAHtDS,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAGTH,EAHSK,EAAA,GAGOJ,EAHPI,EAAA,GAKhB,OACEK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEbH,EAAAC,EAAAC,cAACoB,EAAD,CACA9B,QAASN,EACTI,eAAgBA,EAChBC,kBAAmBA,EACnBF,MAAO,6DCLEkC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCDDY,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHxC,EAAAC,EAAAC,cAACF,EAAAC,EAAMwC,WAAP,KACEzC,EAAAC,EAAAC,cAACwC,EAAD,QAOJnB","file":"static/js/main.661a9c82.chunk.js","sourcesContent":["// if we import the dropdown in some components we neeed options which will be shown in dropdown\r\nexport const DROPDOWN_OPTIONS=[\r\n   'Social Media post',\r\n   'A friend suggested it',\r\n   'Advertisement in youtube',\r\n   'official website', \r\n   'own research',\r\n]","import React from 'react';\r\nimport './dropdown.css';\r\nimport { useState } from 'react';\r\n//passing the created props\r\nconst Dropdown = (props) => {\r\n//using the passed props by js destructuring\r\n   const {label, selectedOption, setSelectedOption, options} = props;\r\n   \r\n   const [isOptionsVisible, setIsOptionsVisible] = useState(false);\r\n\r\n   //to set the selected option as option and to close the dropdown after selection//\r\n   const handleSelected=(option)=>{\r\n    setSelectedOption(option);\r\n    setIsOptionsVisible(false);\r\n   };\r\n\r\n  return (\r\n    <div className=\"dropdown\">\r\n        <div className=\"heading\">Dropdown-project</div>\r\n        {label && <div className='dropdown-label'>{label}</div>}\r\n         \r\n         <div className=\"dropdown-component\">\r\n            <div className=\"selected-option\" \r\n            //to toggle the down and up icon//\r\n                 onClick={() => setIsOptionsVisible(!isOptionsVisible)}>\r\n                <div>{selectedOption}</div>\r\n            {/*to create down arrow and up arrow based on use state*/}\r\n                {isOptionsVisible ? \r\n                 /*default code from tableircons for down and up buttons*/\r\n                 (<svg \r\n                   xmlns=\"http://www.w3.org/2000/svg\" \r\n                   class=\"icon icon-tabler icon-tabler-caret-up\" \r\n                   width=\"20\" \r\n                   height=\"20\" \r\n                   viewBox=\"0 0 24 24\" \r\n                   stroke-width=\"1.5\" \r\n                   stroke=\"#7f5345\" \r\n                   fill=\"none\" \r\n                   stroke-linecap=\"round\" \r\n                   stroke-linejoin=\"round\">\r\n                  <path \r\n                   stroke=\"none\" \r\n                   d=\"M0 0h24v24H0z\" \r\n                   fill=\"none\"/>\r\n                  <path \r\n                   d=\"M18 15l-6 -6l-6 6h12\" />\r\n                  </svg>) : \r\n                  (<svg \r\n                    xmlns=\"http://www.w3.org/2000/svg\" \r\n                    class=\"icon icon-tabler icon-tabler-caret-down\" \r\n                    width=\"20\" \r\n                    height=\"20\" \r\n                    viewBox=\"0 0 24 24\" \r\n                    stroke-width=\"1.5\" \r\n                    stroke=\"#7f5345\" \r\n                    fill=\"none\" \r\n                    stroke-linecap=\"round\" \r\n                    stroke-linejoin=\"round\">\r\n                   <path \r\n                     stroke=\"none\" \r\n                     d=\"M0 0h24v24H0z\" \r\n                     fill=\"none\"/>\r\n                   <path d=\"M18 15l-6 -6l-6 6h12\" transform=\"rotate(180 12 12)\" />\r\n                   </svg>)}\r\n            </div>\r\n            {isOptionsVisible && (\r\n                //to make dropdown options visible after clicking down //\r\n                   <div className=\"dropdown-options\">\r\n                {options.length >0 && options.map((option) => <div className=\"dropdown-option\" onClick={()=>handleSelected(option)}>{option}</div>) }\r\n            </div> )}\r\n         </div>\r\n        </div>\r\n  )\r\n};\r\n\r\nexport default Dropdown;","import React, { useState } from 'react';\nimport \"./App.css\";\nimport { DROPDOWN_OPTIONS } from './common/data/dropdown';\nimport Dropdown from './components/dropdown';\n\nconst App = () => {\n//whatever we are selecting in dropdown file should be accessable in parent file\n// creating usestate use \n  const [selectedOption, setSelectedOption] = useState(DROPDOWN_OPTIONS[0]);\n\n  return (\n    <div className='app'>\n\n      <Dropdown\n      options={DROPDOWN_OPTIONS} \n      selectedOption={selectedOption} \n      setSelectedOption={setSelectedOption}\n      label={\"How did you come to know about the career camp course?\"}\n      />\n    </div>\n  )\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}